class Solution {
    public String[] permutation(String S) {
        String[] s = S.split("");
        int[] state = new int[s.length];
        StringBuilder nowString = new StringBuilder();
        HashSet<String> finalStrings = new HashSet<>();
        combine(s, state, nowString, finalStrings);
        String[] finalResults = new String[finalStrings.size()];
        int index = 0;
        for(String finalString : finalStrings) {
            finalResults[index] = finalString;
            index++;
        }
        return finalResults;
    }
    public void combine(String[] s, int[] state, StringBuilder nowString, HashSet<String> finalStrings) {
        if(nowString.length() == s.length) {
            return;
        }
        for(int i = 0; i < s.length; i++) {
            if(state[i] == 1) {
                continue;
            }
            nowString.append(s[i]);
            state[i] = 1;
            if(nowString.length() == s.length) {
                finalStrings.add(nowString.toString());
            }
            combine(s, state, nowString, finalStrings);
            nowString = nowString.deleteCharAt(nowString.length()-1);
            state[i] = 0;
        }
    }
}