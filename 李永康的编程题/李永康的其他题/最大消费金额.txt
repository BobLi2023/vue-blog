public class Solution {
    public static void main(String[] args) throws IOException {
        System.out.println(maxSpendAmount());
    }

    /**
     * 最大消费金额
     *
     * @return int
     *
     * 从众多心仪商品中购买 3 件，而且想尽可能的花完资金，现在请你设计一个程
     * 序，计算小明尽可能花费的最大资金数
     * 输入第一行为一维整型数组 m，数组元素记录单个商品的价格
     * 输入第二行为购买资金的额度 r
     * 输出为满足上述条件的最大花费额度。注意：如果不存在满足上述条件的商品请
     * 返回-1
     * 23,26,36,27
     * 78
     * 输出 76
     * 23,30,40
     * 26
     * 输出 -1
     *
     */
    public static int maxSpendAmount() {
        Scanner scanner = new Scanner(System.in);
        String inputString = scanner.nextLine();
        int expectMaxSpend = scanner.nextInt();
        String[] inputArrays = inputString.split(",");
        int[] inputNumbers = new int[inputArrays.length];
        if (inputNumbers.length<3) {
            return -1;
        }
        boolean[] isSelected = new boolean[inputArrays.length];
        for (int i=0; i<inputNumbers.length; i++) {
            inputNumbers[i] = Integer.parseInt(inputArrays[i]);
        }
        int maxSpend = -1;
        for (int i=0; i<inputNumbers.length; i++) {
            if (isSelected[i]) {
                continue;
            }
            int currentSpend = 0;
            isSelected[i]=true;
            currentSpend += inputNumbers[i];
            for (int j=0; j<inputNumbers.length; j++) {
                if (isSelected[j]) {
                    continue;
                }
                isSelected[j]=true;
                currentSpend += inputNumbers[j];
                for (int k=0; k<inputNumbers.length; k++) {
                    if (isSelected[k]) {
                        continue;
                    }
                    isSelected[k]=true;
                    currentSpend += inputNumbers[k];
                    if (currentSpend<=expectMaxSpend && currentSpend>maxSpend) {
                        maxSpend=currentSpend;
                    }
                    isSelected[k]=false;
                    currentSpend -= inputNumbers[k];

                }
                isSelected[j]=false;
                currentSpend -= inputNumbers[j];
            }
            isSelected[i]=false;
            currentSpend -= inputNumbers[i];
        }
        return maxSpend;
    }
}